{"version":3,"sources":["helpers/dateFormatter.js","../node_modules/jspdf/dist sync","serviceWorker.js","context/RealmContext.js","containers/SignInPage.js","components/common/SearchField.js","components/common/FilterButton.js","components/common/Profile.js","components/TopPanel.js","components/projects/ProjectCard.js","components/projects/ProjectsList.js","components/common/helpers/TableIcons.js","components/common/SimpleTable.js","components/projects/MilestonesInfo.js","components/common/helpers/generateTablesData.js","components/projects/MilestonesInfoPaper.js","components/ProjectsContainer.js","graphql/graphql-operations.js","containers/MainPage.js","RealmApolloProvider.jsx","RealmApp.jsx","App.js","index.js"],"names":["module","exports","toEnUsDate","stringDate","Date","toLocaleString","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Boolean","window","location","hostname","match","RealmContext","React","createContext","require","config","GOOGLE_CLIENT_ID","process","APP_NAME","COPYRIGHT_LINK","REALM_APP_ID","REALM_SERVICE_NAME","REALM_DATABASE_NAME","REALM_COLLECTION_NAME","ContextContainer","props","setUser","user","setState","state","app","dbCollection","mongoClient","db","collection","anonymousSignIn","a","credentials","Realm","anonymous","logIn","console","error","onGoogleSuccessSignIn","response","google","then","log","catch","err","onGoogleSignInFailure","getUserAccessToken","currentUser","refreshCustomData","accessToken","fetchFiltersDefaultValues","functions","getFiltersDefaultValues","fetchedData","regionsList","regions","sort","ownersList","owners","projectManagersList","projectManagers","setLoadProcessing","loadProcessing","setProjects","projects","cleanLocalProjects","projectWithCurrentMilestone","logOut","setFilter","newFilter","filter","setSorting","newSort","setProjectWithCurrentMilestone","setIsEditing","isEditing","watcher","event","clusterTime","operationType","fullDocument","lastUpdateTime","_id","map","p","push","watch","googleClientId","realmAppId","appName","copyrightLink","region","owner","project_manager","name","field","order","funcs","setClient","Provider","value","this","children","Component","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","submit","signInForm","width","justifyContent","errorBox","SignInPage","onSuccess","onFailure","signInError","classes","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","Button","type","color","onClick","clientId","buttonText","scope","responseType","align","Box","mt","Copyright","Link","href","getFullYear","defaultProps","SearchField","inputPlaceHolder","onKeyDown","searchContainer","searchIcon","inputBaseRoot","inputBaseInput","InputBase","placeholder","root","input","inputProps","FilterButton","filterButtonText","filterDialogTitle","filtersObject","applyButtonText","onApplyFilters","showEmptyValue","formContainer","useState","openDialog","setOpenDialog","handleClickCloseDialog","Dialog","disableBackdropClick","disableEscapeKeyDown","open","onClose","DialogTitle","DialogContent","obj","FilterOption","formControl","label","currentValue","values","setValue","DialogActions","FormControl","InputLabel","htmlFor","Select","native","onChange","Input","v","Profile","menuId","mobileMenuId","onProfileMenuOpen","onMobileMenuOpen","sectionDesktop","sectionMobile","IconButton","edge","aria-label","aria-controls","aria-haspopup","grow","flexGrow","menuButton","marginRight","title","breakpoints","up","search","position","borderRadius","shape","fade","common","white","marginLeft","padding","height","pointerEvents","inputRoot","inputInput","paddingLeft","transition","transitions","create","minWidth","TopPanel","fetchProjects","useContext","useEffect","needToClean","localFilter","setLocalFilter","target","searchQuery","undefined","localSort","setLocalSorting","sortObject","handleSearchKeyDown","key","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","isMobileMenuOpen","handleProfileMenuOpen","currentTarget","handleMobileMenuClose","handleMenuClose","AppBar","Toolbar","noWrap","MobileMenu","onMobileMenuClose","ProfileMenu","onMenuClose","onLogOut","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","marginBottom","info","leftInfo","float","rightInfo","fontSize","pos","ProjectCard","psproject","Card","CardContent","gutterBottom","account","details","pm_stage","pm_project_status","product_end_date","Divider","MilestonesList","milestones","onClickMilestone","milestone","projectId","milestoneId","List","subheader","ListSubheader","ListItem","button","ListItemText","primary","ProjectsList","listRoot","length","CircularProgress","project","generateTableIcons","onClickEditButton","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","SimpleTable","tableName","currentColumns","currentData","onUpdate","columns","setColumns","data","setData","icons","editable","isEditable","rowData","onRowUpdate","newData","oldData","tableKey","updateKey","dataUpdate","index","tableData","onRowUpdateCancelled","MilestonesInfo","milestonesTableColumns","milestonesTableRows","opportunity","currentMilestone","country","base","milestone_amount","gap_hours","generateMilestoneTableData","scheduleTableColumns","scheduleTableRows","schedule","s","date","week","scheduled","revenue","hours","generateScheduleTableData","handleUpdateRow","query","update","options","updateOne","tableContainer","MilestonesInfoPaper","containerClasses","foundProjects","foundMilestones","m","Grid","container","item","xs","Paper","background","overflow","minHeight","textAlign","text","whiteSpace","maxHeight","ProjectsContainer","FIND_PROJECTS","gql","MainPage","queryOptions","variables","filtersInput","active","useLazyQuery","onCompleted","psprojectsData","onError","fetchPolicy","fetchProjectsByTrigger","timerId","setTimeout","clearTimeout","watchForUpdates","RealmApolloProvider","createApolloClient","client","graphQlUrl","ApolloClient","link","HttpLink","uri","fetch","headers","Authorization","cache","InMemoryCache","RealmApp","appRef","useRef","current","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d54e395a.chunk.js","sourcesContent":["module.exports = {\n    toEnUsDate\n};\n\nfunction toEnUsDate(stringDate) {\n    return new Date(stringDate).toLocaleString(\"en-US\");\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 381;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport * as Realm from \"realm-web\";\n\nconst RealmContext = React.createContext('realm');\n\nrequire('dotenv').config();\n\nconst GOOGLE_CLIENT_ID = `${process.env.REACT_APP_GOOGLE_CLIENT_ID}` || '';\nconst APP_NAME = `${process.env.REACT_APP_NAME}` || 'Realm Test App';\nconst COPYRIGHT_LINK = `${process.env.REACT_APP_COPYRIGHT_LINK}` || 'http://localhost:3000';\nconst REALM_APP_ID = `${process.env.REACT_APP_REALM_APP_ID}` || '';\nconst REALM_SERVICE_NAME = `${process.env.REACT_APP_SERVICE_NAME}` || 'mongodb-atlas';\nconst REALM_DATABASE_NAME = `${process.env.REACT_APP_DATABASE_NAME}` || '';\nconst REALM_COLLECTION_NAME = `${process.env.REACT_APP_COLLECTION_NAME}` || '';\n\nexport default class ContextContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state,\n            googleClientId: GOOGLE_CLIENT_ID,\n            realmAppId: REALM_APP_ID,\n            appName: APP_NAME,\n            copyrightLink: COPYRIGHT_LINK,\n            app: new Realm.App(REALM_APP_ID),\n            user: null,\n            dbCollection: null,\n            filter: {region: '', owner: '', project_manager: '', name: ''},\n            sort: {field: 'name', order: 'ASC'},\n            regionsList: [],\n            ownersList: [],\n            projectManagersList: [],\n            loadProcessing: false,\n            projects: null,\n            projectWithCurrentMilestone: null,\n            isEditing: false\n        };\n        this.funcs = {\n            setUser: this.setUser,\n            setClient: this.setClient,\n            anonymousSignIn: this.anonymousSignIn,\n            onGoogleSuccessSignIn: this.onGoogleSuccessSignIn,\n            onGoogleSignInFailure: this.onGoogleSignInFailure,\n            getUserAccessToken: this.getUserAccessToken,\n            logOut: this.logOut,\n            fetchFiltersDefaultValues: this.fetchFiltersDefaultValues,\n            setLoadProcessing: this.setLoadProcessing,\n            setProjects: this.setProjects,\n            cleanLocalProjects: this.cleanLocalProjects,\n            setFilter: this.setFilter,\n            setSorting: this.setSorting,\n            setProjectWithCurrentMilestone: this.setProjectWithCurrentMilestone,\n            setIsEditing: this.setIsEditing,\n            watcher: this.watcher\n        };\n\n        this.lastUpdateTime = null;\n    };\n\n    setUser = (user) => {\n        this.setState({user});\n        if (this.state.app && user) {\n            const dbCollection = user\n                .mongoClient(REALM_SERVICE_NAME)\n                .db(REALM_DATABASE_NAME)\n                .collection(REALM_COLLECTION_NAME);\n            this.setState({dbCollection});\n        }\n    };\n\n    anonymousSignIn = async () => {\n        const credentials = Realm.Credentials.anonymous();\n        try {\n            const user = await this.state.app.logIn(credentials);\n            this.setUser(user);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    onGoogleSuccessSignIn = (response) => {\n        const credentials = Realm.Credentials.google(response.code);\n        this.state.app.logIn(credentials).then(user => {\n            console.log(`Logged in with id: ${user.id}`);\n            this.setUser(user);\n        }).catch(err => {\n            console.error('onGoogleSuccessSignIn:', err);\n        });\n    };\n\n    onGoogleSignInFailure = (response) => {\n        console.error('onGoogleSignInFailure:', response);\n    }\n\n    getUserAccessToken = async () => {\n        await this.state.app.currentUser.refreshCustomData();\n        return this.state.app.currentUser.accessToken;\n    };\n\n    fetchFiltersDefaultValues = async () => {\n        if (this.state.user) {\n            const fetchedData = await this.state.user.functions.getFiltersDefaultValues();\n            this.setState(\n                {\n                    regionsList: fetchedData.regions.sort() || [],\n                    ownersList: fetchedData.owners.sort() || [],\n                    projectManagersList: fetchedData.projectManagers.sort() || [],\n                }\n            );\n        }\n    }\n\n    setLoadProcessing = loadProcessing => {\n        this.setState({loadProcessing});\n    }\n\n    setProjects = projects => {\n        this.setState({projects});\n    }\n\n    cleanLocalProjects = async () => {\n        this.setState({projects: [], projectWithCurrentMilestone: null});\n    }\n\n    logOut = async () => {\n        await this.state.app.currentUser.logOut();\n        this.setUser(this.state.app.currentUser);\n    }\n\n    setFilter = (newFilter) => {\n        const filter = {...this.state.filter, ...newFilter};\n        this.setState({filter});\n    }\n\n    setSorting = (newSort) => {\n        this.setState({sort: newSort});\n    }\n\n    setProjectWithCurrentMilestone = (projectWithCurrentMilestone) => {\n        this.setState({projectWithCurrentMilestone})\n    }\n\n    setIsEditing = (isEditing) => {\n        this.setState({isEditing});\n    }\n\n    watcher = async () => {\n        if (!this.state.dbCollection) return;\n\n        for await (let event of this.state.dbCollection.watch()) {\n            const {clusterTime, operationType, fullDocument} = event;\n\n            if (\n                (!this.lastUpdateTime || this.lastUpdateTime < clusterTime) &&\n                fullDocument\n            ) {\n                this.lastUpdateTime = clusterTime;\n                let {projects} = this.state;\n\n                if (operationType === 'replace' || operationType === 'update') {\n                    const {_id} = event.fullDocument;\n                    projects = projects.map(\n                        p => (p._id === _id) ? event.fullDocument : p\n                    );\n                } else if (operationType === 'insert') {\n                    projects.push(event.fullDocument);\n                }\n\n                this.setState({projects});\n            }\n        }\n    }\n\n    render() {\n        return (\n            <RealmContext.Provider value={{...this.state, ...this.funcs}}>\n                {this.props.children}\n            </RealmContext.Provider>\n        )\n    }\n}\n\nexport { RealmContext };","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { GoogleLogin } from 'react-google-login';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Link from '@material-ui/core/Link';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    signInForm: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    errorBox: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n        display: 'flex',\n        justifyContent: 'center'\n    }\n}));\n\nSignInPage.propTypes = {\n    googleClientId: PropTypes.string.isRequired,\n    appName: PropTypes.string.isRequired,\n    copyrightLink: PropTypes.string.isRequired,\n    onSuccess: PropTypes.func.isRequired,\n    onFailure: PropTypes.func.isRequired,\n    signInError: PropTypes.string\n}\n\nSignInPage.defaultProps = {\n    signInError: null\n}\n\nexport default function SignInPage(props) {\n    const {\n        googleClientId,\n        appName,\n        copyrightLink,\n        onSuccess,\n        onFailure,\n        anonymousSignIn,\n        signInError\n    } = props;\n\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                    onClick={anonymousSignIn}\n                >\n                    Anonymous user\n                </Button>\n                <div className={classes.signInForm}>\n                    <GoogleLogin\n                        clientId={googleClientId}\n                        buttonText=\"Sign in with Google\"\n                        onSuccess={onSuccess}\n                        onFailure={onFailure}\n                        scope={'email profile'}\n                        responseType={'code'}\n                    />\n                </div>\n                <div className={classes.signInForm}>\n\n                </div>\n                {signInError && <div className={classes.errorBox}>\n                    <Typography variant=\"body2\" color=\"error\" align=\"center\">\n                        {signInError}\n                    </Typography>\n                </div>}\n            </div>\n            <Box mt={8}>\n                <Copyright\n                    appName={appName}\n                    copyrightLink={copyrightLink}\n                />\n            </Box>\n        </Container>\n    );\n}\n\nfunction Copyright(props) {\n    const { appName, copyrightLink } = props;\n\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href={copyrightLink}>\n                {appName}\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputBase from \"@material-ui/core/InputBase\";\n\nSearchField.propTypes = {\n    classes: PropTypes.object.isRequired,\n    inputPlaceHolder: PropTypes.string.isRequired,\n    onKeyDown: PropTypes.func.isRequired\n}\n\nexport default function SearchField(props) {\n    const {classes, inputPlaceHolder, onKeyDown} = props;\n    const {\n        searchContainer,\n        searchIcon,\n        inputBaseRoot,\n        inputBaseInput\n    } = classes;\n\n    return (\n        <div className={searchContainer}>\n            <div className={searchIcon}>\n                <SearchIcon />\n            </div>\n\n            <InputBase\n                placeholder={inputPlaceHolder}\n                classes={{\n                    root: inputBaseRoot,\n                    input: inputBaseInput\n                }}\n                inputProps={{'aria-label': 'search'}}\n                onKeyDown={onKeyDown}\n            />\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\n\nimport Input from \"@material-ui/core/Input\";\n\nFilterButton.propTypes = {\n    classes: PropTypes.object.isRequired,\n    filterButtonText: PropTypes.string.isRequired,\n    filterDialogTitle: PropTypes.string.isRequired,\n    filtersObject: PropTypes.object.isRequired,\n    applyButtonText: PropTypes.string.isRequired,\n    onApplyFilters: PropTypes.func.isRequired\n}\n\nexport default function FilterButton(props) {\n    const {\n        classes,\n        filterButtonText,\n        filterDialogTitle,\n        filtersObject,\n        applyButtonText,\n        onApplyFilters,\n        showEmptyValue\n    } = props;\n\n    const {formContainer} = classes;\n\n    const [openDialog, setOpenDialog] = useState(false);\n    const handleClickOpenDialog = () => {\n        setOpenDialog(true);\n    };\n    const handleClickCloseDialog = () => {\n        setOpenDialog(false);\n    };\n    const handleClickApplyFilters = () => {\n        onApplyFilters();\n        setOpenDialog(false);\n    }\n\n    return (\n        <div className={formContainer}>\n            <Button onClick={handleClickOpenDialog} variant=\"contained\">\n                {filterButtonText}\n            </Button>\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                open={openDialog}\n                onClose={handleClickCloseDialog}\n            >\n                <DialogTitle>{filterDialogTitle}</DialogTitle>\n\n                <DialogContent>\n                    <form className={formContainer}>\n                        {filtersObject.map(obj => <FilterOption\n                            classes={{formControl: classes.formControl}}\n                            label={obj.label}\n                            currentValue={obj.currentValue}\n                            values={obj.values}\n                            setValue={obj.setValue}\n                            showEmptyValue={showEmptyValue}\n                        />)}\n                    </form>\n                </DialogContent>\n\n                <DialogActions>\n                    <Button onClick={handleClickCloseDialog} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleClickApplyFilters} color=\"primary\">\n                        {applyButtonText}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n\nfunction FilterOption(props) {\n    const {\n        classes,\n        label, currentValue, values, setValue,\n        showEmptyValue\n    } = props;\n\n    const {formControl} = classes;\n\n    return (\n        <FormControl className={formControl}>\n            <InputLabel htmlFor=\"demo-dialog-native\">{label}</InputLabel>\n            <Select\n                native\n                value={currentValue}\n                onChange={setValue}\n                input={<Input id=\"demo-dialog-native\" />}\n            >\n                {showEmptyValue && <option value=''/>}\n                {values.map(v => <option value={v}>{v}</option>)}\n            </Select>\n        </FormControl>\n    )\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MoreIcon from '@material-ui/icons/MoreVert';\n\nProfile.propTypes = {\n    classes: PropTypes.object.isRequired,\n    menuId: PropTypes.string.isRequired,\n    mobileMenuId: PropTypes.string.isRequired,\n    onProfileMenuOpen: PropTypes.func.isRequired,\n    onMobileMenuOpen: PropTypes.func.isRequired\n}\n\nexport default function Profile(props) {\n    const {\n        classes,\n        menuId, mobileMenuId,\n        onProfileMenuOpen,\n        onMobileMenuOpen\n    } = props;\n\n    const {\n        sectionDesktop,\n        sectionMobile,\n    } = classes;\n\n    return (<>\n        <div className={sectionDesktop}>\n            <IconButton\n                edge=\"end\"\n                aria-label=\"account of current user\"\n                aria-controls={menuId}\n                aria-haspopup=\"true\"\n                onClick={onProfileMenuOpen}\n                color=\"inherit\"\n            >\n                <AccountCircle />\n            </IconButton>\n        </div>\n\n        <div className={sectionMobile}>\n            <IconButton\n                aria-label=\"show more\"\n                aria-controls={mobileMenuId}\n                aria-haspopup=\"true\"\n                onClick={onMobileMenuOpen}\n                color=\"inherit\"\n            >\n                <MoreIcon />\n            </IconButton>\n        </div>\n    </>)\n}","import React, {useContext, useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\n\nimport {RealmContext} from \"../context/RealmContext\";\nimport SearchField from \"./common/SearchField\";\nimport FilterButton from \"./common/FilterButton\";\nimport Profile from \"./common/Profile\";\n\nTopPanel.propTypes = {\n    fetchProjects: PropTypes.func.isRequired\n};\n\nconst useStyles = makeStyles((theme) => ({\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginRight: theme.spacing(2),\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(3),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: '20ch',\n        },\n    },\n    formContainer: {\n        marginLeft: theme.spacing(2)\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    sectionDesktop: {\n        display: 'none',\n        [theme.breakpoints.up('md')]: {\n            display: 'flex',\n        },\n    },\n    sectionMobile: {\n        display: 'flex',\n        [theme.breakpoints.up('md')]: {\n            display: 'none',\n        },\n    },\n}));\n\nexport default function TopPanel(props) {\n    const classes = useStyles();\n\n    const {fetchProjects} = props;\n    const {\n        filter, setFilter, sort, setSorting,\n        regionsList, ownersList, projectManagersList,\n        fetchFiltersDefaultValues, setLoadProcessing,\n        logOut\n    } = useContext(RealmContext);\n\n    useEffect(() => {\n        fetchFiltersDefaultValues();\n    }, []);\n\n    useEffect(() => {\n        setLoadProcessing(true);\n        fetchProjects({needToClean: true});\n    }, [filter, sort]);\n\n    const [localFilter, setLocalFilter] = useState(filter);\n    const filtersObject = [\n        {\n            label: 'Region',\n            currentValue: localFilter.region,\n            values: regionsList,\n            setValue: event => {\n                setLocalFilter({...localFilter, region: event.target.value});\n            }\n        },\n        {\n            label: 'Owner',\n            currentValue: localFilter.owner,\n            values: ownersList,\n            setValue: event => {\n                setLocalFilter({...localFilter, owner: event.target.value});\n            }\n        },\n        {\n            label: 'PM',\n            currentValue: localFilter.project_manager,\n            values: projectManagersList,\n            setValue: event => {\n                setLocalFilter({...localFilter, project_manager: event.target.value});\n            }\n        }\n    ];\n\n    const onApplyFilters = (searchQuery = undefined) => {\n        if (searchQuery !== undefined) {\n            setLocalFilter({...localFilter, name: searchQuery});\n            setFilter({...localFilter, name: searchQuery});\n        } else {\n            setFilter(localFilter);\n        }\n    }\n\n    const [localSort, setLocalSorting] = useState(sort);\n    const sortObject = [\n        {\n            label: 'Field',\n            currentValue: localSort.field,\n            values: ['name', 'region', 'owner'],\n            setValue: event => {\n                setLocalSorting({...localSort, field: event.target.value});\n            }\n        },\n        {\n            label: 'Order',\n            currentValue: localSort.order,\n            values: ['ASC', 'DESC'],\n            setValue: event => {\n                setLocalSorting({...localSort, order: event.target.value});\n            }\n        }\n    ];\n\n    const onApplySorting = () => {\n        setSorting(localSort);\n    }\n\n    const handleSearchKeyDown = async (event) => {\n        if (event.key === 'Enter') {\n            onApplyFilters(event.target.value);\n        }\n    }\n\n    const menuId = 'primary-search-account-menu';\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuOpen = (event) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n    const handleLogOut = () => {\n        logOut();\n        handleMenuClose();\n    }\n\n    return (\n        <div className={classes.grow}>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        Projects\n                    </Typography>\n                    <SearchField\n                        classes={{\n                            searchContainer: classes.search,\n                            searchIcon: classes.searchIcon,\n                            inputBaseRoot: classes.inputRoot,\n                            inputBaseInput: classes.inputInput\n                        }}\n                        inputPlaceHolder={'Search projects'}\n                        onKeyDown={handleSearchKeyDown}\n                    />\n                    <FilterButton\n                        classes={{\n                            formContainer: classes.formContainer,\n                            formControl: classes.formControl\n                        }}\n                        filterButtonText={'Filters'}\n                        filterDialogTitle={'Filter projects'}\n                        filtersObject={filtersObject}\n                        applyButtonText={'Apply filters'}\n                        onApplyFilters={onApplyFilters}\n                        showEmptyValue={true}\n                    />\n                    <FilterButton\n                        classes={{\n                            formContainer: classes.formContainer,\n                            formControl: classes.formControl\n                        }}\n                        filterButtonText={'Sort'}\n                        filterDialogTitle={'Sort projects'}\n                        filtersObject={sortObject}\n                        applyButtonText={'Sort'}\n                        onApplyFilters={onApplySorting}\n                        showEmptyValue={false}\n                    />\n                    <div className={classes.grow} />\n\n                    <Profile\n                        classes={{\n                            sectionDesktop: classes.sectionDesktop,\n                            sectionMobile: classes.sectionMobile\n                        }}\n                        menuId={menuId}\n                        mobileMenuId={mobileMenuId}\n                        onProfileMenuOpen={handleProfileMenuOpen}\n                        onMobileMenuOpen={handleMobileMenuOpen}\n                    />\n                </Toolbar>\n            </AppBar>\n\n            <MobileMenu\n                mobileMoreAnchorEl={mobileMoreAnchorEl}\n                mobileMenuId={mobileMenuId}\n                isMobileMenuOpen={isMobileMenuOpen}\n                onMobileMenuClose={handleMobileMenuClose}\n                onProfileMenuOpen={handleProfileMenuOpen}\n            />\n\n            <ProfileMenu\n                anchorEl={anchorEl}\n                menuId={menuId}\n                isMenuOpen={isMenuOpen}\n                onMenuClose={handleMenuClose}\n                onLogOut={handleLogOut}\n            />\n        </div>\n    );\n}\n\nfunction ProfileMenu(props) {\n    const {\n        anchorEl, menuId, isMenuOpen,\n        onMenuClose, onLogOut\n    } = props;\n\n    return (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={isMenuOpen}\n            onClose={onMenuClose}\n        >\n            <MenuItem onClick={onLogOut}>Log Out</MenuItem>\n        </Menu>\n    )\n}\n\nfunction MobileMenu(props) {\n    const {\n        mobileMoreAnchorEl, mobileMenuId, isMobileMenuOpen,\n        onMobileMenuClose, onProfileMenuOpen\n    } = props;\n\n    return (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={isMobileMenuOpen}\n            onClose={onMobileMenuClose}\n        >\n            <MenuItem onClick={onProfileMenuOpen}>\n                <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"primary-search-account-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"inherit\"\n                >\n                    <AccountCircle />\n                </IconButton>\n                <p>Profile</p>\n            </MenuItem>\n        </Menu>\n    )\n}\n","import React, {useContext} from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport {RealmContext} from \"../../context/RealmContext\";\nimport {toEnUsDate} from \"../../helpers/dateFormatter\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: '55vh',\n        marginBottom: 5\n    },\n    info: {\n        display: 'inline-block',\n        width: '100%'\n    },\n    leftInfo: {\n        float: 'left'\n    },\n    rightInfo: {\n        float: 'right'\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nProjectCard.propTypes = {\n    psproject: PropTypes.object.isRequired\n};\n\nexport default function ProjectCard(props) {\n    const classes = useStyles();\n\n    const {psproject} = props;\n    const {setProjectWithCurrentMilestone} = useContext(RealmContext);\n\n    const handleOnClickMilestone = (milestone) => {\n        setProjectWithCurrentMilestone({\n            projectId: psproject._id,\n            milestoneId: milestone._id\n        });\n    }\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <div className={classes.info}>\n                    <div className={classes.leftInfo}>\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                            {psproject.account}\n                        </Typography>\n                    </div>\n                    <div className={classes.rightInfo}>\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                            {psproject.region}\n                        </Typography>\n                    </div>\n                </div>\n\n                <Typography variant=\"h5\" component=\"h2\">\n                    {psproject.name}\n                </Typography>\n\n                <div className={classes.info}>\n                    <div className={classes.leftInfo}>\n                        <Typography className={classes.pos} color=\"textSecondary\" gutterBottom>\n                            Owner: {psproject.owner}\n                        </Typography>\n                    </div>\n                    <div className={classes.rightInfo}>\n                        <Typography className={classes.pos} color=\"textSecondary\" gutterBottom>\n                            PM: {psproject.project_manager}\n                        </Typography>\n                    </div>\n                </div>\n\n                <Typography variant=\"body2\" component=\"p\">\n                    <b>Stage:</b> {psproject.details.pm_stage}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                    <b>Status:</b> {psproject.details.pm_project_status}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                    <b>Expires:</b> {toEnUsDate(psproject.details.product_end_date)}\n                </Typography>\n                <Divider />\n\n                <MilestonesList\n                    milestones={psproject.milestones}\n                    onClickMilestone={handleOnClickMilestone}\n                />\n            </CardContent>\n        </Card>\n    );\n}\n\nfunction MilestonesList(props) {\n    const {milestones, onClickMilestone} = props;\n\n    return (\n        <List subheader={<li />}>\n            <ListSubheader>Milestones</ListSubheader>\n            {milestones.map(milestone => {\n                return (\n                    <ListItem button onClick={() => onClickMilestone(milestone)}>\n                        <ListItemText primary={milestone.name} />\n                    </ListItem>\n                )\n            })}\n        </List>\n    )\n}","import React, {useContext} from 'react';\nimport PropTypes from 'prop-types';\nimport List from \"@material-ui/core/List\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport {RealmContext} from \"../../context/RealmContext\";\nimport ProjectCard from \"./ProjectCard\";\n\nProjectsList.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default function ProjectsList(props) {\n    const {classes} = props;\n\n    const {loadProcessing, projects} = useContext(RealmContext);\n\n    return (\n        <List component=\"nav\" className={classes.listRoot} aria-label=\"contacts\">\n            <ListSubheader color=\"primary\">\n                <Typography variant=\"h5\">\n                    Total projects: {projects ? projects.length : 0}\n                </Typography>\n            </ListSubheader>\n\n            {loadProcessing && <ListItem>\n                <CircularProgress />\n            </ListItem>}\n\n            {!loadProcessing && projects && projects.map(project => {\n                return (\n                    <ListItem>\n                        <ProjectCard psproject={project} />\n                    </ListItem>\n                )\n            })}\n        </List>\n    )\n}","import React, {forwardRef} from 'react';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nexport default function generateTableIcons(props) {\n    const {onClickEditButton} = props;\n\n    return  {\n        Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n        Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n        Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n        DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        Edit: forwardRef((props, ref) => <Edit\n            {...props} ref={ref} onClick={onClickEditButton}\n        />),\n        Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n        Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n        FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n        LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n        NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n        ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n        SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n        ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n        ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n    };\n}","import React, {useContext, useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport MaterialTable from \"material-table\";\n\nimport generateTableIcons from \"./helpers/TableIcons\";\nimport {RealmContext} from \"../../context/RealmContext\";\n\nSimpleTable.propTypes = {\n    projectId: PropTypes.string.isRequired,\n    tableName: PropTypes.string.isRequired,\n    currentColumns: PropTypes.array.isRequired,\n    currentData: PropTypes.array.isRequired,\n    onUpdate: PropTypes.func\n}\n\nexport default function SimpleTable(props) {\n    const {\n        projectId, tableName,\n        currentColumns, currentData,\n        onUpdate\n    } = props;\n\n    const {isEditing, setIsEditing} = useContext(RealmContext);\n\n    const [columns, setColumns] = useState(currentColumns);\n    const [data, setData] = useState(currentData);\n\n    useEffect(() => {\n        !isEditing && setColumns(currentColumns);\n    }, [isEditing, projectId, currentColumns]);\n\n    useEffect(() => {\n        !isEditing && setData(currentData);\n    }, [isEditing, projectId, currentData]);\n\n    const onClickEditButton = () => setIsEditing(true);\n\n    return (\n        <MaterialTable\n            title={tableName}\n            icons={generateTableIcons({onClickEditButton})}\n            columns={columns}\n            data={data}\n            editable={{\n                isEditable: rowData => rowData.editable,\n                onRowUpdate: async (newData, oldData) => {\n                    try {\n                        const {tableKey, updateKey} = newData;\n                        await onUpdate({updateKey, value: newData[tableKey]});\n                        const dataUpdate = [...data];\n                        const index = oldData.tableData.id;\n                        dataUpdate[index] = newData;\n                        setData([...dataUpdate]);\n                        setIsEditing(false);\n                    } catch (e) {\n                        console.error(e);\n                        setIsEditing(false);\n                    }\n                },\n                onRowUpdateCancelled: () => setIsEditing(false)\n            }}\n        />\n    );\n}","import React, {useContext} from 'react';\nimport PropTypes from 'prop-types';\n\nimport SimpleTable from \"../common/SimpleTable\";\nimport {\n    generateMilestoneTableData,\n    generateScheduleTableData\n} from \"../common/helpers/generateTablesData\";\nimport {RealmContext} from \"../../context/RealmContext\";\n\nMilestonesInfo.propTypes = {\n    classes: PropTypes.object.isRequired,\n    project: PropTypes.object.isRequired,\n};\n\nexport default function MilestonesInfo(props) {\n    const {classes, project} = props;\n    const {dbCollection} = useContext(RealmContext);\n\n    const {\n        milestonesTableColumns,\n        milestonesTableRows\n    } = generateMilestoneTableData(project);\n\n    const {\n        scheduleTableColumns,\n        scheduleTableRows\n    } = generateScheduleTableData(project);\n\n    const handleUpdateRow = async ({updateKey, value}) => {\n        const query = {_id: project._id};\n        const update = {'$set': {[updateKey]: value}};\n        const options = {'upsert': false};\n        await dbCollection.updateOne(query, update, options);\n    }\n\n    return (<>\n        {milestonesTableRows.length !== 0 && <div className={classes.tableContainer}>\n            <SimpleTable\n                projectId={project._id}\n                tableName='Project milestone info'\n                currentColumns={milestonesTableColumns}\n                currentData={milestonesTableRows}\n                onUpdate={handleUpdateRow}\n            />\n        </div>}\n        {scheduleTableRows.length !== 0 && <div className={classes.tableContainer}>\n            <SimpleTable\n                projectId={project._id}\n                tableName='Schedule'\n                currentColumns={scheduleTableColumns}\n                currentData={scheduleTableRows}\n            />\n        </div>}\n    </>)\n}","import {toEnUsDate} from \"../../../helpers/dateFormatter\";\n\nexport function generateMilestoneTableData(project) {\n    if (!project) return {\n        milestonesTableColumns: [],\n        milestonesTableRows: []\n    };\n\n    const {\n        owner, region,\n        project_manager,\n        account, name,\n        opportunity, details,\n        currentMilestone\n    } = project;\n\n    const milestonesTableColumns = [\n        {title: 'Project / Milestone Fields', field: 'name', editable: 'never'},\n        {title: 'Value', field: 'value', editable: 'onUpdate'}\n    ];\n    const milestonesTableRows = [\n        {name: 'Project Owner', value: owner, editable: false},\n        {name: 'Region', value: region, editable: false},\n        {name: 'Project Manager', value: project_manager, editable: false},\n        {\n            name: 'PM Stage',\n            value: details.pm_stage,\n            editable: true,\n            tableKey: 'value',\n            updateKey: 'details.pm_stage'\n        },\n        {name: 'Account', value: account, editable: false},\n        {name: 'Opportunity', value: opportunity.name, editable: false},\n        {name: 'PS Project Name', value: name, editable: false},\n        {name: 'Milestone Name', value: currentMilestone.name, editable: false},\n        {name: 'Country', value: currentMilestone.country, editable: false},\n        {name: 'Milestone amount', value: currentMilestone.base.milestone_amount, editable: false},\n        {name: 'Gap Hours', value: currentMilestone.base.gap_hours, editable: false}\n    ]\n\n    return {milestonesTableColumns, milestonesTableRows}\n}\n\nexport function generateScheduleTableData(project) {\n    if (!project) return {\n        scheduleTableColumns: [],\n        scheduleTableRows: []\n    };\n\n    const {currentMilestone} = project;\n\n    const scheduleTableColumns = [\n        {title: 'Date', field: 'date', editable: 'never'},\n        {title: 'Scheduled', field: 'scheduled', editable: 'never'},\n        {title: 'Hours', field: 'hours', editable: 'never'}\n    ];\n    const scheduleTableRows = currentMilestone.schedule.map(s => {\n        return {\n            date: toEnUsDate(s.week),\n            scheduled: s.revenue ? `$ ${s.revenue}` : '-',\n            hours: s.hours ? s.hours : '-',\n            editable: false\n        };\n    });\n\n    return {scheduleTableColumns, scheduleTableRows}\n}","import React, {useContext} from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport {RealmContext} from \"../../context/RealmContext\";\nimport MilestonesInfo from \"./MilestonesInfo\";\n\nconst useStyles = makeStyles({\n    tableContainer: {\n        marginTop: '20px'\n    }\n});\n\nMilestonesInfoPaper.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default function MilestonesInfoPaper(props) {\n    const containerClasses = useStyles();\n    const {classes} = props;\n    const {projectWithCurrentMilestone, projects} = useContext(RealmContext);\n\n    let project = null;\n    let currentMilestone = null;\n    if (projectWithCurrentMilestone) {\n        const {projectId, milestoneId} = projectWithCurrentMilestone;\n        const foundProjects = projects.filter(p => p._id === projectId);\n        if (foundProjects && foundProjects.length) {\n            project = foundProjects[0];\n            const foundMilestones = project.milestones.filter(m => m._id === milestoneId);\n            currentMilestone = foundMilestones && foundMilestones.length ? foundMilestones[0] : null;\n        }\n    }\n\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                    <Typography variant=\"h4\" gutterBottom>\n                        Milestones overview\n                    </Typography>\n                    <Divider />\n\n                    {project && currentMilestone\n                        ? <MilestonesInfo\n                            classes={containerClasses}\n                            project={{...project, currentMilestone}}\n                        />\n                        : <div className={containerClasses.tableContainer}>\n                            <Typography variant=\"body1\">\n                                Click on project milestone to see an overview...\n                            </Typography>\n                        </div>\n                    }\n                </Paper>\n            </Grid>\n        </Grid>\n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport ProjectsList from \"./projects/ProjectsList\";\nimport MilestonesInfoPaper from \"./projects/MilestonesInfoPaper\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        marginTop: 70,\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    root: {\n        width: '90vh',\n        backgroundColor: theme.palette.background.paper,\n        position: 'relative',\n        overflow: 'auto',\n        minHeight: '90vh',\n        height: '90vh'\n    },\n    paper: {\n        padding: theme.spacing(1),\n        textAlign: 'center',\n        color: theme.palette.text.primary,\n        whiteSpace: 'normal',\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n        maxHeight: '90vh',\n        overflow: 'auto'\n    },\n}));\n\nexport default function ProjectsContainer() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.container}>\n            <ProjectsList classes={{listRoot: classes.root}} />\n            <MilestonesInfoPaper classes={{paper: classes.paper}}/>\n        </div>\n    )\n}","import gql from 'graphql-tag'\n\nexport const FIND_PROJECTS = gql`\n    query FindProjectsCustomResolver($filtersInput: FiltersInput!) {\n        psprojectsData(input: $filtersInput) {\n            _id\n            account\n            active\n            details {\n                pm_stage\n                pm_project_status\n                product_end_date\n            }\n            opportunity {\n                name\n                owner\n                engagement_manager\n            }\n            milestones {\n                _id\n                country\n                currency\n                name\n                base {\n                    milestone_amount\n                    gap_hours\n                }\n                schedule {\n                    week\n                    revenue\n                    hours\n                }\n            }\n            name\n            owner\n            project_manager\n            region\n            stage\n        }\n    }\n`;","import React, {useContext} from 'react';\nimport {useQuery, useLazyQuery} from \"@apollo/client\";\n\nimport {RealmContext} from \"../context/RealmContext\";\nimport TopPanel from \"../components/TopPanel\";\nimport ProjectsContainer from \"../components/ProjectsContainer\";\nimport {FIND_PROJECTS} from \"../graphql/graphql-operations\";\n\nexport default function MainPage() {\n    const {\n        setProjects,\n        setLoadProcessing,\n        cleanLocalProjects,\n        filter, sort, watcher\n    } = useContext(RealmContext);\n\n    const getSortOrder = () => {\n        const {field, order} = sort;\n        return {field, order: order === 'DESC' ? -1 : 1};\n    }\n\n    const queryOptions = {\n        variables: {\n            filtersInput: {\n                filter: {...filter, active: true},\n                sort: getSortOrder()\n            }\n        }\n    };\n\n    const [fetchProjects] = useLazyQuery(\n        FIND_PROJECTS,\n        {\n            ...queryOptions,\n            onCompleted: data => {\n                setProjects(data.psprojectsData);\n                setLoadProcessing(false);\n            },\n            onError: error => {\n                console.error(error);\n            },\n            fetchPolicy: 'network-only'\n        }\n    );\n\n    const fetchProjectsByTrigger = async ({needToClean}) => {\n        needToClean && await cleanLocalProjects();\n        await fetchProjects();\n    }\n\n    let timerId = setTimeout(async function watchForUpdates() {\n        timerId && clearTimeout(timerId);\n        await watcher();\n        timerId = setTimeout(watchForUpdates, 5000);\n    }, 5000);\n\n    return (<>\n        <TopPanel fetchProjects={fetchProjectsByTrigger} />\n        <ProjectsContainer />\n    </>)\n}","import React, {useContext, useEffect, useState} from 'react';\nimport {\n    ApolloProvider,\n    ApolloClient,\n    HttpLink,\n    InMemoryCache\n} from \"@apollo/client\";\n\nimport {RealmContext} from \"./context/RealmContext\";\nimport MainPage from \"./containers/MainPage\";\n\nexport default function RealmApolloProvider() {\n    const {\n        realmAppId,\n        getUserAccessToken,\n        user\n    } = useContext(RealmContext);\n\n    const [client, setClient] = useState(createApolloClient(realmAppId, getUserAccessToken));\n    useEffect(() => {\n        setClient(\n            createApolloClient(realmAppId, getUserAccessToken)\n        );\n    }, [user]);\n\n    return (\n        <ApolloProvider client={client}>\n            <MainPage />\n        </ApolloProvider>\n    )\n}\n\nfunction createApolloClient(realmAppId, getUserAccessToken) {\n    const graphQlUrl = `https://realm.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;\n\n    return new ApolloClient({\n        link: new HttpLink({\n            uri: graphQlUrl,\n            fetch: async (uri, options) => {\n                const accessToken = await getUserAccessToken();\n                options.headers.Authorization = `Bearer ${accessToken}`;\n                return fetch(uri, options);\n            },\n        }),\n        cache: new InMemoryCache()\n    });\n}","import React, {useContext, useRef, useEffect} from \"react\";\n\nimport {RealmContext} from \"./context/RealmContext\";\nimport SignInPage from \"./containers/SignInPage\";\nimport RealmApolloProvider from \"./RealmApolloProvider\";\n\nexport default function RealmApp() {\n    const {\n        app, appName, copyrightLink, googleClientId,\n        anonymousSignIn, user, setUser,\n        onGoogleSuccessSignIn, onGoogleSignInFailure\n    } = useContext(RealmContext);\n\n    const appRef = useRef(app);\n\n    useEffect(() => {\n        setUser(app.currentUser);\n    }, [appRef.current.currentUser]);\n\n    return (\n        <>\n            {!user && <SignInPage\n                onSuccess={onGoogleSuccessSignIn}\n                appName={appName}\n                copyrightLink={copyrightLink}\n                googleClientId={googleClientId}\n                onFailure={onGoogleSignInFailure}\n                anonymousSignIn={anonymousSignIn}\n            />}\n            {user && <RealmApolloProvider />}\n        </>\n    )\n}","import React, {Component} from 'react';\n\nimport RealmContextContainer from \"./context/RealmContext\";\nimport RealmApp from \"./RealmApp\";\n\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <RealmContextContainer>\n                    <RealmApp />\n                </RealmContextContainer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}