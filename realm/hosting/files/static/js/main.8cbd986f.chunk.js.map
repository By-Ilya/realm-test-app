{"version":3,"sources":["component/MessageTemplate.js","gmail/auth.js","stitch/authentication.js","component/StitchAuth.js","component/InputForm.js","containers/Nav.js","containers/App.js","serviceWorker.js","index.js","gmail/message.js","stitch/app.js"],"names":["custMessageHTMLBody","custName","custEmail","projectId","encodeURIComponent","generateCustSurveyLink","ceMessageHTMLBody","ceName","ceEmail","projectDesc","generateCeSurveyLink","CustMessageTemplate","props","ReactHtmlParser","CeMessageTemplate","require","loginAnonymous","credential","AnonymousCredential","app","auth","loginWithCredential","loginGoogle","a","loginWithRedirect","GoogleRedirectCredential","getCurrentUser","isLoggedIn","user","logoutCurrentUser","logoutUserWithId","id","StitchAuthContext","React","createContext","useStitchAuth","context","useContext","Error","StitchAuthProvider","useState","currentUser","authState","setAuthState","useEffect","listener","authListener","onUserLoggedIn","loggedInUser","onUserLoggedOut","loggedOutUser","addAuthListener","hasRedirectResult","handleRedirectResult","handleOAuthRedirects","state","removeAuthListener","removeAuthenticationListener","handleLogin","provider","handleLogout","console","log","authInfo","useMemo","actions","Provider","value","children","useInput","initialValue","setValue","reset","bind","onChange","event","target","InputForm","bindCustName","resetCustName","bindCustEmail","bindProjectId","resetProjectId","bindProjectDesc","resetProjectDesc","bindCeName","resetCeName","bindCeEmail","onSubmit","evt","preventDefault","sendMail","profile","data","email","then","alert","type","NavbarContainer","styled","div","Nav","onClick","name","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","genCustMessage","origEmail","join","genCeMessage","callFunction","APP_ID","Stitch","hasAppClient","getAppClient","initializeAppClient"],"mappings":"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","file":"static/js/main.8cbd986f.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\n\nfunction generateCustSurveyLink(custName,custEmail,projectId) {\n\treturn \"https://mongodb.co1.qualtrics.com/jfe/form/SV_2oCghQbYfJdV5Mp?\" \n\t  + \"Name=\" + encodeURIComponent(custName)\n\t  + \"&Email=\" + encodeURIComponent(custEmail)\n\t  + \"&ProjectID=\" + encodeURIComponent(projectId);\n}\n\nfunction generateCeSurveyLink(ceName,ceEmail,projectId) {\n\treturn \"https://mongodb.co1.qualtrics.com/jfe/form/SV_aUX8tfdgGcbd4j3?\" \n\t  + \"Name=\" + encodeURIComponent(ceName)\n\t  + \"&Email=\" + encodeURIComponent(ceEmail)\n\t  + \"&ProjectID=\" + encodeURIComponent(projectId);\n}\n\n// export function custMessageHTMLBody(custName,custEmail,projectId) {\n//   return (\n//   \t  <div>\n// \t\t  Hi {custName},\n// \t\t  <br/>\n// \t\t  Thank you for using MongoDB Consulting.\n// \t\t  <br/>\n// \t\t  Take a quick <a href={generateCustSurveyLink(custName, custEmail, projectId)}>survey</a> and tell us about your experience below.\n// \t\t  <br/> <br/>\n// \t\t  MongoDB Professional Services\n// \t\t  <br/>\n// \t  </div>\n//   );\n// }\n\nexport function custMessageHTMLBody(custName,custEmail,projectId) {\n  return `\n  \t  <div>\n\t\t  Hi ${custName},\n\t\t  <br/><br/>\n\t\t  Thank you for using MongoDB Consulting.\n\t\t  <br/>\n\t\t  Take a quick <a href=${generateCustSurveyLink(custName, custEmail, projectId)}>survey</a> and tell us about your experience below.\n\t\t  <br/> <br/>\n\t\t  MongoDB Professional Services\n\t\t  <br/>\n\t  </div>`;\n}\n\nexport function ceMessageHTMLBody(ceName,ceEmail,projectId,projectDesc) {\n  return `\n  \t  <div>\n\t\t  Hi ${ceName},\n\t\t  <br/><br/>\n\t\t  Thank you for successfully completing the following PS Project: ${projectId} - ${projectDesc}.\n\t\t  <br/>\n\t\t  Take a quick <a href=${generateCeSurveyLink(ceName,ceEmail, projectId)}>survey</a> and share your experience below.\n\t\t  <br/> <br/>\n\t\t  MongoDB Professional Services\n\t\t  <br/>\n\t  </div>`;\n}\n\nexport function CustMessageTemplate(props) {\n  return (\n  <div>\n  <h1>Customer email</h1>\n  <b>To: {props.custEmail}</b><br/>\n  <b>From: MongoDB Consulting</b><br/>\n  <b>Subject: Thank you</b><br/>\n  {ReactHtmlParser(custMessageHTMLBody(props.custName, props.custEmail, props.projectId))}\n  </div>\n  );\n}\n\nexport function CeMessageTemplate(props) {\n  return (\n  <div>\n  <h1>CE email</h1>\n  <b>To: {props.ceEmail}</b><br/>\n  <b>From: MongoDB Consulting</b><br/>\n  <b>Subject: Complete post-engagement survey</b><br/>\n\t{ReactHtmlParser(ceMessageHTMLBody(props.ceName, props.ceEmail, props.projectId, props.projectDesc))}\n  </div>\n  );\n}","import { genCustMessage,genCeMessage } from \"./message\";\n\n//const {google} = require('googleapis');\nconst fetch = require('node-fetch');\nconst crypto = require(\"crypto\");\nvar http = require('https');\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nconst TOKEN_PATH = 'token.json';\n\nconst service_json = {\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDfinY0BBn3Hq6n\\n0JEZ3TzhK/fwN7cp007zUMwOPihv0zHL6SslDr3XZ1Gbn8YwQCb0HHmQIM5Idnx1\\nvioYxvDlr2zvR+PQzwRrIO3+JG3W839pILumoT9StWD3DjH+OrQKcw+8Liva3QIT\\nx+/3Y/r6Gsgpmm53puZCVSBPdIzUl+xdhjJ2mOWgWfEVV6PHvngs57z1dEL7EP5M\\nbtdFLdDKJs9MWCyjNZPchKn84NKxM4eWxmvEEyRdt8gAS/+zNaaet0+KgavJh1Mn\\n/IDeoZ51x4ge9NY639sdT0rFYq74Mj+w/saD5lU5L/pmtT2jNY9WZS4Hl3mTOoST\\n5Da6K/d/AgMBAAECggEAZpW4vBM7xTv34/xjcm6knyMZ48v1ywR1gVTNaCXfUb4m\\nZpEJIzb6KQ15loUCoyb1mWYt5VYgxIFXiYMs93TonUddowunQS6XtQAGJ/CY1aGm\\nEV0bsJLkJ/Uj3AzQJX7UG82E5ZN8vbJZ3zEMb0gbJ8a9n9YGpvNZTQyayMvQS0jX\\nBeZLJQECJ1TeIB4dggUpyuc5/KxVxfhoDG4zkGYniFKSdgIFU4WgGkxqBVCQNU89\\nJA0C3u1zmSc6a/5sLdeXg/xrrvOq60xjQggqgLdAtVoqRiG7FXZ2pQAaT0hiVons\\nZ1/AaGdSV8FLZ2YXk0q4Z0zbWAEvyn8rtCBqizVOoQKBgQD+9SRsGWfkRzXayvUR\\npjyHH3Ai1f5xIptbVFeWRFUnttHIKCG8DXFlo+I+GuHBHv2Tlf4t52ZcU1flPPAQ\\nMh3/P+zK0xiSFuNxLNJdBObrl/WpWx+pGC6KPT5K5bjYQ9ONePMyNjbgWWzPaxcZ\\ntcbyuDqPN3UPdfDlU6rDO5UvHwKBgQDgdG+1XykfNIFpe1s0+skSr9YEYMCbFw8Q\\nSxEsFZ0QnD/mH4F3FneDQGoJKfjtVkZKy+rskcwSK3zEHTU6/WpCQ99p6dymkxI1\\nm2kW70d+sASuU04iDA8e2vYe2Xk/VoCowEtIyNIsrfzgl2Tul8LsxA0AfzUJOvKa\\nZG3G1E0LoQKBgQDbsTEpVNsJAbOOTMTP6IbPiG+AFRWjN0bXc93lRgx6pDYwWyR2\\nfr7v7j/NdCyD1Mh8nAriUzsI42ghyFi0G/ttLxBD1ZKej8p8gzrhnI+/ArpUrIij\\nlIrF4/ABaeHVuNxaU5Z79etjdqskMAs/xDsie006i3b7U424jlfe00DB0QKBgQC8\\nJ59FMWJtcDxTyj6o6NoJujD0No7+85ODGwpoJC4oMHM4W4zR4ZmKA0NgLzkm6729\\nEbf7XDTvvli2pa1rp+edaPwt8wcu8/a9zWuI+Ei8oJ0r7VWAIQ/D09WiArgrKj5s\\nN9ZkS0Q0hB2JwB+yCrIyfB5SHlC9Thb06d9EX8++QQKBgQCyI0djMO5PFqlbxOvP\\naN3blPn4do78rnl38iukMmAHWbs9Ef+7A1oYW4Lapd9UsYu3zUHqb/qJiy5RdXsN\\nFEqxzEUEYFuRyjqTAGmdpw47DU4/CWp7S7Fr9ibGs1uRG6fJsrEpihb1sespdYTR\\nqfGh8ihKdadmYTJon7O9k3YSfg==\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"ps-bot@mongodb-ps.iam.gserviceaccount.com\",\n  \"client_id\": \"113245106108999778081\"\n}\n\nfunction base64Encode(data) {\n  let buff = new Buffer(data);\n  return buff.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_');;\n}\n\nfunction computeRsaSha256Signature(str, privateKey) {\n  var signerObject = crypto.createSign(\"RSA-SHA256\");\n  signerObject.update(str);\n  return signerObject.sign({key:privateKey,padding:crypto.constants.RSA_PKCS1_PSS_PADDING}, \"base64\");\n}\n\nasync function getOAuthServiceToken() {\n  var private_key = service_json.private_key; // private_key of JSON file retrieved by creating Service Account\n  var client_email = service_json.client_email; // client_email of JSON file retrieved by creating Service Account\n  //var scopes = [\"https://www.googleapis.com/auth/drive\",\"https://mail.google.com/\"]; // Scopes\n  var scopes = [\n      'https://mail.google.com/',\n      'https://www.googleapis.com/auth/gmail.modify',\n      'https://www.googleapis.com/auth/gmail.compose',\n      'https://www.googleapis.com/auth/gmail.send',\n    ]\n  \n  var url = \"https://www.googleapis.com/oauth2/v3/token\";\n  var header = {\n    alg: \"RS256\",\n    typ: \"JWT\",\n  };\n  var now = Math.floor(Date.now() / 1000);\n  var claim = {\n    iss: client_email,\n    scope: scopes.join(\" \"),\n    aud: url,\n    exp: (now + 3600).toString(),\n    iat: now.toString(),\n  };\n  var signature = base64Encode(JSON.stringify(header)) + \".\" + base64Encode(JSON.stringify(claim));\n  var jwt = signature + \".\" + computeRsaSha256Signature(signature, private_key);\n  \n  var params = {\n    method: \"post\",\n    body: JSON.stringify({\n      assertion: jwt,\n      grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n    }),\n  };\n\n  return fetch(url, params).then(r => r.json())\n    .then((json) => {\n        console.log(json)\n        //sendMessage(json.access_token)\n        return json.access_token\n    });\n\n  //return;\n}\n\n\nfunction sendMessage(access_token, message) {\n//   message =\n// \"From: Alex K\\r\\n\" + \n// \"To: alex@mongodb.com\\r\\n\" +\n// \"Subject: As basic as it get 3s\\r\\n\\r\\n\" +\n// \"This is the plain text body of the message.  Note the blank line between the header information and the body of the message.\";\n\n// var mail = new Buffer(\n//     \"From: ps-bot@mongodb-ps.iam.gserviceaccount.com\\n\" +\n//     \"To: alex@mongodb.com\\n\" +\n//     \"Subject: Subject Text\\n\\n\" +\n\n//     \"Message text\"\n// ).toString(\"base64\").replace(/\\+/g, '-').replace(/\\//g, '_');\n\n// var post_options = {\n//   hostname: 'www.googleapis.com',\n//   port: '443',\n//   path: '/gmail/v1/users/me/messages/send',\n//   method: 'POST',\n//   headers: {\n//     \"Authorization\": `Bearer ${access_token}`,\n//     \"Content-Type\" : \"application/json\"\n//   }\n// };\n\n// var post_req = http.request(post_options, function(res) {\n//   res.setEncoding('utf8');\n//   res.on('data', function (chunk) {\n//       console.log('Response: ' + chunk);\n//   });\n// });\n\n// post_req.write(JSON.stringify({ \"raw\": mail }));\n// post_req.end();\n  console.log(message);\n\n  access_token=\"ya29.a0AfH6SMDGwkwKp3l_TAqu4SuREikvOTQqzi46hSXkUwU_NCbwb0x6Mlmb5HMs-jr7J-PXbOTFTuQOa5kIUOsVpSlMIhmdHv1pnf9ZOqVPPBN-RFtW1yBydorkIKj0TYa-242TQKeKqa8LcWpBVD4wlrvYfT77SrBPdXw\"\n\n  var url = \"https://www.googleapis.com/gmail/v1/users/me/messages/send?access_token=\" + access_token;\n  var params = {\n    method: \"post\",\n    body: JSON.stringify({\n      raw: base64Encode(message)\n    }),\n    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}\n  };\n\n  fetch(url, params).then(r => r.json())\n    .then((json) => {\n        console.log(json)\n    });\n    \n}\n\n// Load client secrets from a local file.\nexport async function testGMail(origEmail,custName,custEmail,projectId,projectDesc,ceName,ceEmail) {\n  // Authorize a client with credentials, then call the Gmail API.\n  let token = await getOAuthServiceToken();\n\n  let msg;\n\n  if (custEmail) {\n    msg = genCustMessage(origEmail,custName,custEmail,projectId)\n    sendMessage(token,msg)\n  }\n\n  if (ceEmail) {\n    msg = genCeMessage(origEmail,ceName,ceEmail,projectId,projectDesc)\n    sendMessage(token,msg)\n  }\n};\n","import {\n      AnonymousCredential,\n      GoogleRedirectCredential\n  } from \"mongodb-stitch-browser-sdk\";\nimport { app } from \"./app.js\";\n\nexport function loginAnonymous() {\n  // Allow users to log in anonymously\n  const credential = new AnonymousCredential();\n  return app.auth.loginWithCredential(credential);\n}\n\nexport async function loginGoogle() {\n    return await app.auth.loginWithRedirect(new GoogleRedirectCredential());\n}\n\nexport function hasLoggedInUser() {\n  // Check if there is currently a logged in user\n  return app.auth.isLoggedIn;\n}\n\nexport function getCurrentUser() {\n  // Return the user object of the currently logged in user\n  return app.auth.isLoggedIn ? app.auth.user : null;\n}\n\nexport function logoutCurrentUser() {\n  // Logout the currently logged in user\n  const user = getCurrentUser();\n  return app.auth.logoutUserWithId(user.id);\n}\n\nexport function addAuthenticationListener(listener) {\n    app.auth.addAuthListener(listener);\n}\nexport function removeAuthenticationListener(listener) {\n    app.auth.removeAuthListener(listener);\n}\n\nexport function handleOAuthRedirects() {\n    if (app.auth.hasRedirectResult()) {\n        return app.auth.handleRedirectResult();\n    }\n};","import React, {useEffect} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  hasLoggedInUser,\n  loginAnonymous,\n  loginGoogle,\n  logoutCurrentUser,\n  getCurrentUser,\n  addAuthenticationListener,\n  removeAuthenticationListener,\n  handleOAuthRedirects,\n} from \"./../stitch/authentication\";\n\n// Create a React Context that lets us expose and access auth state\n// without passing props through many levels of the component tree\nconst StitchAuthContext = React.createContext();\n\n// Create a React Hook that lets us get data from our auth context\nexport function useStitchAuth() {\n  const context = React.useContext(StitchAuthContext);\n  if (!context) {\n    throw new Error(`useStitchAuth must be used within a StitchAuthProvider`);\n  }\n  return context;\n}\n\n// Create a component that controls auth state and exposes it via\n// the React Context we created.\nexport function StitchAuthProvider(props) {\n  const [authState, setAuthState] = React.useState({\n    isLoggedIn: hasLoggedInUser(),\n    currentUser: getCurrentUser(),\n  });\n\n  useEffect(() => {\n      const authListener = {\n          onUserLoggedIn: (auth, loggedInUser) => {\n          if (loggedInUser) {\n              setAuthState(authState => ({\n              ...authState,\n              isLoggedIn: true,\n              currentUser: loggedInUser,\n              }));\n          }\n          },\n          onUserLoggedOut: (auth, loggedOutUser) => {\n          setAuthState(authState => ({\n              ...authState,\n              isLoggedIn: false,\n              currentUser: null,\n          }));\n          }\n      };\n      addAuthenticationListener(authListener);\n      handleOAuthRedirects();\n      setAuthState(state => ({ ...state}));\n      return () => {\n          removeAuthenticationListener(authListener);\n      };\n  }, []);\n\n  // Authentication Actions\n  const handleLogin = async (provider) => {\n    if (!authState.isLoggedIn) {\n        switch(provider) {\n          case \"anonymous\": return loginAnonymous()\n          case \"google\": return loginGoogle()\n          default: {}\n        }\n    }\n  }\n\n  const handleLogout = async () => {\n    const { isLoggedIn } = authState;\n    if (isLoggedIn) {\n      await logoutCurrentUser();\n      setAuthState({\n        ...authState,\n        isLoggedIn: false,\n        currentUser: null,\n      });\n    } else {\n      console.log(`can't handleLogout when no user is logged in`);\n    }\n  };\n\n  // We useMemo to improve performance by eliminating some re-renders\n  const authInfo = React.useMemo(\n    () => {\n      const { isLoggedIn, currentUser } = authState;\n      const value = {\n        isLoggedIn,\n        currentUser,\n        actions: { handleLogin, handleLogout },\n      };\n      return value;\n    },\n    [authState.isLoggedIn],\n  );\n  return (\n    <StitchAuthContext.Provider value={authInfo}>\n      {props.children}\n    </StitchAuthContext.Provider>\n  );\n}\nStitchAuthProvider.propTypes = {\n  children: PropTypes.element,\n};\n","import { useState } from \"react\";\nimport React from \"react\";\nimport { CustMessageTemplate, CeMessageTemplate } from \"./MessageTemplate\";\nimport { testGMail } from \"../gmail/auth\"\nimport { useStitchAuth } from \"../component/StitchAuth\";\nimport { sendMail } from \"../gmail/message\";\n\nexport const useInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: event => {\n        setValue(event.target.value);\n      }\n    }\n  };\n};\n\nexport function InputForm(props) {\n  const { currentUser } = useStitchAuth();\n\n  const { value:custName, bind:bindCustName, reset:resetCustName } = useInput('');\n  const { value:custEmail, bind:bindCustEmail, reset:resetCustEmail } = useInput('');\n\n  const { value:projectId, bind:bindProjectId, reset:resetProjectId } = useInput('');\n  const { value:projectDesc, bind:bindProjectDesc, reset:resetProjectDesc } = useInput('');\n\n  const { value:ceName, bind:bindCeName, reset:resetCeName } = useInput('');\n  const { value:ceEmail, bind:bindCeEmail, reset:resetCeEmail } = useInput('');\n  \n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n\n      sendMail(currentUser.profile.data.email,custName,custEmail,projectId,projectDesc,ceName,ceEmail).then ( () =>\n        alert(`Emails sent`) );\n\n      resetCustName();\n      resetCustName();\n\n      resetProjectId();\n      resetProjectDesc();\n\n      resetCeName();\n      resetCeName();\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n      <label>\n        Project ID:\n        <input type=\"text\" {...bindProjectId} />\n      </label>\n      <label>\n        Project Description:\n        <input type=\"text\" {...bindProjectDesc} />\n      </label>\n      </div>\n      <div>\n      <label>\n        Customer Name:\n        <input type=\"text\" {...bindCustName} />\n      </label>\n      <label>\n        Customer Email:\n        <input type=\"text\" {...bindCustEmail} />\n      </label>\n      </div>\n      <div>\n      <label>\n        CE Name:\n        <input type=\"text\" {...bindCeName} />\n      </label>\n      <label>\n        CE Email:\n        <input type=\"text\" {...bindCeEmail} />\n      </label>\n      </div>\n      <CustMessageTemplate custName={custName} custEmail={custEmail} projectId={projectId}/>\n      <CeMessageTemplate ceName={ceName} ceEmail={ceEmail} projectId={projectId} projectDesc={projectDesc}/>\n      <input type=\"submit\" value=\"Send\" />\n    </form>\n  );\n}","import React from 'react'\nimport styled from \"@emotion/styled\";\nimport { useStitchAuth } from \"../component/StitchAuth\";\nimport { app } from \"../stitch/app.js\";\nimport { InputForm } from \"../component/InputForm\";\n\nconst NavbarContainer = styled.div`\n  height: 60px;\n  padding: 10px 20px;\n  line-height: 40px;\n  display: flex;\n  flex-direction: row-reverse;\n`;\n\nfunction Nav () {\n\t//const { actions } = useStitchAuth();\n\tconst {\n      isLoggedIn,\n      currentUser,\n      actions: { handleLogout, handleLogin },\n    } = useStitchAuth();\n\n    if (isLoggedIn) {\n      return (\n        <NavbarContainer>\n          <button onClick={handleLogout}>Logout</button>\n          {\"Hello, \" + currentUser.profile.data.name}\n          <InputForm/>\n        </NavbarContainer>\n      )\n    } else {\n      return(\n          <NavbarContainer>\n            <button onClick={() => handleLogin(\"google\")}>Log In</button>\n            {\"Don't forget to log in\"}\n          </NavbarContainer>\n      )\n    }\n}\n\nexport default Nav;","import React from 'react';\nimport styled from \"@emotion/styled\";\nimport Nav from './Nav';\nimport { StitchAuthProvider, useStitchAuth } from \"./../component/StitchAuth\";\n\n\nconst Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n  height: 100vh;\n  * {\n    font-family: sans-serif;\n  }\n`;\n\nfunction App() {\n  return (\n    <StitchAuthProvider>\n      <Layout>\n        <Nav />\n      </Layout>\n    </StitchAuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { custMessageHTMLBody, ceMessageHTMLBody } from \"./../component/MessageTemplate\";\nimport { app } from \"../stitch/app.js\";\n\nexport function genCustMessage(origEmail,custName,custEmail,projectId) {\n\tconst messageParts = [\n    `From: MongoDB Consulting <${origEmail}>`,\n    `To: ${custName} <${custEmail}>`,\n    'Content-Type: text/html; charset=utf-8',\n    'MIME-Version: 1.0',\n    `Subject: Thank you`,\n    '',\n    custMessageHTMLBody(custName, custEmail, projectId)\n  ];\n  const message = messageParts.join('\\n');\n\n  return message\n}\n\nexport function genCeMessage(origEmail,ceName,ceEmail,projectId,projectDesc) {\n\tconst messageParts = [\n    `From: MongoDB Consulting <${origEmail}>`,\n    `To: ${ceName} <${ceEmail}>`,\n    'Content-Type: text/html; charset=utf-8',\n    'MIME-Version: 1.0',\n    `Subject: Complete post-engagement survey`,\n    '',\n    ceMessageHTMLBody(ceName, ceEmail, projectId, projectDesc)\n  ];\n  const message = messageParts.join('\\n');\n\n  return message\n}\n\n// Load client secrets from a local file.\nexport async function sendMail(origEmail,custName,custEmail,projectId,projectDesc,ceName,ceEmail) {\n  if (custEmail) {\n    await app.callFunction(\"sendMail\",[origEmail, custEmail, \"Thank you\", custMessageHTMLBody(custName, custEmail, projectId)])\n  }\n\n  if (ceEmail) {\n    await app.callFunction(\"sendMail\",[origEmail, ceEmail, \"Complete post-engagement survey\", ceMessageHTMLBody(ceName, ceEmail, projectId, projectDesc)])\n  }\n};","import { Stitch } from \"mongodb-stitch-browser-sdk\";\n\n//const APP_ID = \"askexperts-xswou\";\nconst APP_ID = \"shadowforce-sivxs\";\n\nconst app = Stitch.hasAppClient(APP_ID)\n  ? Stitch.getAppClient(APP_ID)\n  : Stitch.initializeAppClient(APP_ID);\n\nexport { app };"],"sourceRoot":""}